"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventFactory = void 0;
const packets_pb_1 = require("@proto/packets_pb");
const uuid_1 = require("uuid");
const helpers_1 = require("../common/helpers");
const emotion_behavior_entity_1 = require("../entities/emotion-behavior.entity");
const emotion_strength_entity_1 = require("../entities/emotion-strength.entity");
const inworld_packet_entity_1 = require("../entities/inworld_packet.entity");
class EventFactory {
    constructor() {
        this.character = null;
    }
    getCurrentCharacter() {
        return this.character;
    }
    setCurrentCharacter(character) {
        this.character = character;
    }
    dataChunk(chunk, type) {
        const event = new packets_pb_1.DataChunk().setType(type).setChunk(chunk);
        return this.protoPacket().setDataChunk(event);
    }
    audioSessionStart() {
        const event = new packets_pb_1.ControlEvent().setAction(packets_pb_1.ControlEvent.Action.AUDIO_SESSION_START);
        return this.protoPacket().setControl(event);
    }
    audioSessionEnd() {
        const event = new packets_pb_1.ControlEvent().setAction(packets_pb_1.ControlEvent.Action.AUDIO_SESSION_END);
        return this.protoPacket().setControl(event);
    }
    text(text) {
        const event = new packets_pb_1.TextEvent()
            .setText(text)
            .setSourceType(packets_pb_1.TextEvent.SourceType.TYPED_IN)
            .setFinal(true);
        const packet = this.packet().setUtteranceId((0, uuid_1.v4)()).setInteractionId((0, uuid_1.v4)());
        return this.protoPacket().setPacketId(packet).setText(event);
    }
    custom(name) {
        const event = new packets_pb_1.CustomEvent().setName(name);
        const packet = this.packet().setUtteranceId((0, uuid_1.v4)()).setInteractionId((0, uuid_1.v4)());
        return this.protoPacket().setCustom(event).setPacketId(packet);
    }
    cancelResponse() {
        return this.protoPacket().setCancelresponses(new packets_pb_1.CancelResponsesEvent());
    }
    convertToInworldPacket(packet) {
        const packetId = packet.getPacketId();
        const routing = packet.getRouting();
        const source = routing.getSource();
        const target = routing.getTarget();
        const type = this.getType(packet);
        const textEvent = packet.getText();
        const emotionEvent = packet.getEmotion();
        return new inworld_packet_entity_1.InworldPacket(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ type, date: packet.getTimestamp().toDate().toISOString(), packetId: {
                packetId: packetId.getPacketId(),
                utteranceId: packetId.getUtteranceId(),
                interactionId: packetId.getInteractionId(),
            }, routing: {
                source: {
                    name: source.getName(),
                    isPlayer: source.getType() === packets_pb_1.Actor.Type.PLAYER,
                    isCharacter: source.getType() === packets_pb_1.Actor.Type.AGENT,
                },
                target: {
                    name: target.getName(),
                    isPlayer: target.getType() === packets_pb_1.Actor.Type.PLAYER,
                    isCharacter: target.getType() === packets_pb_1.Actor.Type.AGENT,
                },
            } }, (type === inworld_packet_entity_1.InworldPacketType.CUSTOM && {
            custom: {
                name: packet.getCustom().getName(),
            },
        })), (type === inworld_packet_entity_1.InworldPacketType.TEXT && {
            text: {
                text: textEvent.getText(),
                final: textEvent.getFinal(),
            },
        })), (type === inworld_packet_entity_1.InworldPacketType.AUDIO && {
            audio: {
                chuck: packet.getDataChunk().getChunk_asB64(),
            },
        })), (type === inworld_packet_entity_1.InworldPacketType.CONTROL && {
            control: {
                type: this.getControlType(packet),
            },
        })), (type === inworld_packet_entity_1.InworldPacketType.EMOTION && {
            emotions: {
                joy: emotionEvent.getJoy(),
                fear: emotionEvent.getFear(),
                trust: emotionEvent.getTrust(),
                surprise: emotionEvent.getSurprise(),
                behavior: new emotion_behavior_entity_1.EmotionBehavior(emotionEvent.getBehavior()),
                strength: new emotion_strength_entity_1.EmotionStrength(emotionEvent.getStrength()),
            },
        })));
    }
    protoPacket() {
        return new packets_pb_1.InworldPacket()
            .setPacketId(this.packet())
            .setRouting(this.routing())
            .setTimestamp((0, helpers_1.protoTimestamp)());
    }
    routing() {
        var _a;
        const source = new packets_pb_1.Actor().setType(packets_pb_1.Actor.Type.PLAYER);
        const target = new packets_pb_1.Actor()
            .setType(packets_pb_1.Actor.Type.AGENT)
            .setName((_a = this.character) === null || _a === void 0 ? void 0 : _a.getId());
        return new packets_pb_1.Routing().setSource(source).setTarget(target);
    }
    packet() {
        return new packets_pb_1.PacketId().setPacketId((0, uuid_1.v4)());
    }
    getType(packet) {
        switch (true) {
            case packet.hasText():
                return inworld_packet_entity_1.InworldPacketType.TEXT;
            case packet.hasDataChunk() &&
                packet.getDataChunk().getType() === packets_pb_1.DataChunk.DataType.AUDIO:
                return inworld_packet_entity_1.InworldPacketType.AUDIO;
            case packet.hasCustom():
                return inworld_packet_entity_1.InworldPacketType.CUSTOM;
            case packet.hasControl():
                return inworld_packet_entity_1.InworldPacketType.CONTROL;
            case packet.hasEmotion():
                return inworld_packet_entity_1.InworldPacketType.EMOTION;
            default:
                return inworld_packet_entity_1.InworldPacketType.UNKNOWN;
        }
    }
    getControlType(packet) {
        switch (packet.getControl().getAction()) {
            case packets_pb_1.ControlEvent.Action.INTERACTION_END:
                return inworld_packet_entity_1.InworlControlType.INTERACTION_END;
            default:
                return inworld_packet_entity_1.InworlControlType.UNKNOWN;
        }
    }
}
exports.EventFactory = EventFactory;
