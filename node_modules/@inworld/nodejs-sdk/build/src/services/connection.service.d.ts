import { ServiceError } from '@grpc/grpc-js';
import { InworldPacket as ProtoPacket } from '@proto/packets_pb';
import { UserRequest } from '@proto/world-engine_pb';
import { ApiKey, Awaitable, InternalClientConfiguration } from '../common/interfaces';
import { Character } from '../entities/character.entity';
import { InworldPacket } from '../entities/inworld_packet.entity';
import { SessionToken } from '../entities/session_token.entity';
import { EventFactory } from '../factories/event';
interface ConnectionProps {
    apiKey: ApiKey;
    name?: string;
    user?: UserRequest;
    config?: InternalClientConfiguration;
    onDisconnect?: () => void;
    onError?: (err: ServiceError) => void;
    onMessage?: (message: InworldPacket) => Awaitable<void>;
}
export declare class ConnectionService {
    private active;
    private loaded;
    private scene;
    private session;
    private stream;
    private connectionProps;
    private characters;
    private disconnectTimeoutId;
    private eventFactory;
    private onDisconnect;
    private onError;
    private onMessage;
    constructor(props: ConnectionProps);
    isActive(): boolean;
    isAutoReconnected(): boolean;
    generateSessionToken(): Promise<SessionToken>;
    openManually(): Promise<void>;
    close(): void;
    getEventFactory(): EventFactory;
    getCharactersList(): Promise<Character[]>;
    open(): Promise<void>;
    send(getPacket: () => ProtoPacket): Promise<InworldPacket>;
    private loadCharactersList;
    private write;
    private loadScene;
    private scheduleDisconnect;
    private cancelScheduler;
}
export {};
