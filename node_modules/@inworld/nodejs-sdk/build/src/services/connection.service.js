"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionService = void 0;
const character_entity_1 = require("../entities/character.entity");
const session_token_entity_1 = require("../entities/session_token.entity");
const event_1 = require("../factories/event");
const token_client_grpc_service_1 = require("./gprc/token_client_grpc.service");
const world_engine_client_grpc_service_1 = require("./gprc/world_engine_client_grpc.service");
const TIME_DIFF_MS = 50 * 60 * 1000; // 5 minutes
class ConnectionService {
    constructor(props) {
        var _a;
        this.active = false;
        this.loaded = false;
        this.characters = [];
        this.eventFactory = new event_1.EventFactory();
        this.connectionProps = props;
        this.onDisconnect = () => {
            var _a, _b;
            this.active = false;
            (_b = (_a = this.connectionProps).onDisconnect) === null || _b === void 0 ? void 0 : _b.call(_a);
        };
        this.onError =
            (_a = this.connectionProps.onError) !== null && _a !== void 0 ? _a : ((err) => console.error(err));
        if (this.connectionProps.onMessage) {
            this.onMessage = (packet) => __awaiter(this, void 0, void 0, function* () {
                return this.connectionProps.onMessage(this.eventFactory.convertToInworldPacket(packet));
            });
        }
    }
    isActive() {
        return this.active;
    }
    isAutoReconnected() {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.connectionProps.config) === null || _a === void 0 ? void 0 : _a.connection) === null || _b === void 0 ? void 0 : _b.autoReconnect) !== null && _c !== void 0 ? _c : true;
    }
    generateSessionToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const sessionToken = yield new token_client_grpc_service_1.TokenClientGrpcService().generateSessionToken(this.connectionProps.apiKey);
            return new session_token_entity_1.SessionToken({
                token: sessionToken.getToken(),
                type: sessionToken.getType(),
                expirationTime: sessionToken.getExpirationTime(),
                sessionId: sessionToken.getSessionId(),
            });
        });
    }
    openManually() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.isAutoReconnected()) {
                    throw Error('Impossible to open connection manually with `autoReconnect` enabled');
                }
                if (this.isActive()) {
                    throw Error('Connection is already open');
                }
                yield this.loadCharactersList();
                return this.open();
            }
            catch (err) {
                this.onError(err);
            }
        });
    }
    close() {
        var _a, _b;
        this.cancelScheduler();
        this.active = false;
        if (this.connectionProps.onMessage) {
            (_a = this.stream) === null || _a === void 0 ? void 0 : _a.removeListener('data', this.onMessage);
        }
        (_b = this.stream) === null || _b === void 0 ? void 0 : _b.cancel();
    }
    getEventFactory() {
        return this.eventFactory;
    }
    getCharactersList() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadCharactersList();
            return this.characters;
        });
    }
    open() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.loadScene();
                if (this.loaded) {
                    const engineService = new world_engine_client_grpc_service_1.WorldEngineClientGrpcService();
                    this.stream = engineService.session(Object.assign({ session: this.session, onError: this.onError, onDisconnect: this.onDisconnect }, (this.onMessage && { onMessage: this.onMessage })));
                    this.active = true;
                    this.scheduleDisconnect();
                }
            }
            catch (err) {
                this.onError(err);
            }
        });
    }
    send(getPacket) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.cancelScheduler();
                if (this.isActive()) {
                    return this.write(getPacket());
                }
                if (this.isAutoReconnected()) {
                    yield this.open();
                    yield this.loadCharactersList();
                    return this.write(getPacket());
                }
                throw Error('Unable to send data due inactive connection');
            }
            catch (err) {
                this.onError(err);
            }
        });
    }
    loadCharactersList() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.scene) {
                yield this.loadScene();
            }
            if (!this.characters.length)
                this.characters = this.loaded
                    ? this.scene.getAgentsList().map((agent) => new character_entity_1.Character({
                        id: agent.getAgentId(),
                        resourceName: agent.getBrainName(),
                        displayName: agent.getGivenName(),
                    }))
                    : [];
            if (!this.getEventFactory().getCurrentCharacter()) {
                this.getEventFactory().setCurrentCharacter(this.characters[0]);
            }
        });
    }
    write(packet) {
        var _a;
        (_a = this.stream) === null || _a === void 0 ? void 0 : _a.write(packet);
        this.scheduleDisconnect();
        return this.getEventFactory().convertToInworldPacket(packet);
    }
    loadScene() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const { name, user } = this.connectionProps;
            try {
                const sessionId = (_a = this.session) === null || _a === void 0 ? void 0 : _a.getSessionId();
                const expirationTime = (_c = (_b = this.session) === null || _b === void 0 ? void 0 : _b.getExpirationTime()) === null || _c === void 0 ? void 0 : _c.toDate();
                // Generate new session token is it's empty or expired
                if (!expirationTime ||
                    new Date(expirationTime).getTime() - new Date().getTime() <=
                        TIME_DIFF_MS) {
                    this.session = yield this.generateSessionToken();
                    // Reuse session id to keep context of previous conversation
                    if (sessionId) {
                        this.session = new session_token_entity_1.SessionToken({
                            sessionId,
                            token: this.session.getToken(),
                            type: this.session.getType(),
                            expirationTime: this.session.getExpirationTime(),
                        });
                    }
                }
                const engineService = new world_engine_client_grpc_service_1.WorldEngineClientGrpcService();
                if (!this.scene) {
                    this.scene = yield engineService.loadScene({
                        capabilities: this.connectionProps.config.capabilities,
                        name,
                        user,
                        session: this.session,
                    });
                    this.loaded = true;
                }
            }
            catch (err) {
                this.onError(err);
            }
        });
    }
    scheduleDisconnect() {
        var _a, _b;
        if ((_b = (_a = this.connectionProps.config) === null || _a === void 0 ? void 0 : _a.connection) === null || _b === void 0 ? void 0 : _b.disconnectTimeout) {
            this.cancelScheduler();
            this.disconnectTimeoutId = setTimeout(() => this.close(), this.connectionProps.config.connection.disconnectTimeout);
        }
    }
    cancelScheduler() {
        if (this.disconnectTimeoutId) {
            clearTimeout(this.disconnectTimeoutId);
        }
    }
}
exports.ConnectionService = ConnectionService;
