import { ChildProcess, exec } from 'child_process';
import * as fs from 'fs';
import { promisify } from 'util';
import { v4 } from 'uuid';

const writeFile = promisify(fs.writeFile);

class Player {
  private queue: string[] = [];
  private isPlaying = false;
  private child: ChildProcess | undefined;

  async addToQueue(data: string) {
    this.queue.push(data);

    if (!this.isPlaying) {
      await this.playQueue();
    }
  }

  private async playQueue() {
    this.isPlaying = false;

    if (!this.queue.length) {
      return;
    }

    this.isPlaying = true;
    const data = this.queue.shift();

    if (data) {
      const filename = `${v4()}.mp3`;
      await writeFile(filename, Buffer.from(data, 'base64'), 'binary');

      this.child = exec(`sox ${filename} -d `, async (err?: any) => {
        if (err) {
          console.log(err);
        }

        if (!err) {
          fs.unlink(filename, () => {});
          await this.playQueue();
        }
      });
    }
  }

  close() {
    this.child?.kill();
  }
}

const player = new Player();

process.on('message', async (data: string) => {
  return player.addToQueue(data);
});

const done = () => {
  player.close();
  process.exit(0);
};

process.on('SIGINT', done);
process.on('SIGTERM', done);
process.on('SIGUSR2', done);
process.on('unhandledRejection', (err: Error) => {
  player.close();
  console.error(err.message);
  process.exit(1);
});
